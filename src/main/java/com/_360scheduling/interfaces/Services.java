package com._360scheduling.interfaces;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.6.2
 * 2012-10-10T09:08:14.218+09:00
 * Generated source version: 2.6.2
 *
 */
@WebServiceClient(name = "Services",
                  wsdlLocation = "services.wsdl",
                  targetNamespace = "http://360Scheduling.com/Interfaces/")
public class Services extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://360Scheduling.com/Interfaces/", "Services");
    public final static QName ServicesSoap12 = new QName("http://360Scheduling.com/Interfaces/", "ServicesSoap12");
    public final static QName ServicesSoap = new QName("http://360Scheduling.com/Interfaces/", "ServicesSoap");
    static {
        URL url = Services.class.getResource("services.wsdl");
        if (url == null) {
            java.util.logging.Logger.getLogger(Services.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "services.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public Services(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public Services(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public Services() {
        super(WSDL_LOCATION, SERVICE);
    }

//    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
//    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
//    //compliant code instead.
//    public Services(WebServiceFeature ... features) {
//        super(WSDL_LOCATION, SERVICE, features);
//    }
//
//    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
//    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
//    //compliant code instead.
//    public Services(URL wsdlLocation, WebServiceFeature ... features) {
//        super(wsdlLocation, SERVICE, features);
//    }
//
//    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
//    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
//    //compliant code instead.
//    public Services(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
//        super(wsdlLocation, serviceName, features);
//    }

    /**
     *
     * @return
     *     returns ServicesSoap
     */
    @WebEndpoint(name = "ServicesSoap12")
    public ServicesSoap getServicesSoap12() {
        return super.getPort(ServicesSoap12, ServicesSoap.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ServicesSoap
     */
    @WebEndpoint(name = "ServicesSoap12")
    public ServicesSoap getServicesSoap12(WebServiceFeature... features) {
        return super.getPort(ServicesSoap12, ServicesSoap.class, features);
    }
    /**
     *
     * @return
     *     returns ServicesSoap
     */
    @WebEndpoint(name = "ServicesSoap")
    public ServicesSoap getServicesSoap() {
        return super.getPort(ServicesSoap, ServicesSoap.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ServicesSoap
     */
    @WebEndpoint(name = "ServicesSoap")
    public ServicesSoap getServicesSoap(WebServiceFeature... features) {
        return super.getPort(ServicesSoap, ServicesSoap.class, features);
    }

}
